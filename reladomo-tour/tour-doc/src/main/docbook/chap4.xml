<?xml version="1.0"?>

<chapter label="4">
    <title>A Complete Reladomo Application</title>
    <sect1>
        <title>Introduction</title>
        <para>
            This chapter does not introduce any new Reladomo concepts. It uses all the concepts introduced
            in the previous chapters to build a REST API for the bank domain model introduced in chapter 1.
        </para>
        <para>
            It is assumed you have a basic familiarity with REST and building REST APIs with Jersey.
        </para>
    </sect1>
    <sect1>
        <title>REST Resource</title>
        <para>
            The first step is to build a Jersey resource class that implements the REST API.
            The implementation of the API uses the Reladomo CRUD APIs that were reviewed in the previous chapter.
        </para>
        <para>
            Here is a snippet of the <code>CustomerResource</code> class. The rest (pun not intended :) ) of the implementation can be seen in the actual source file.
        </para>
        <programlisting><![CDATA[
@Path("/api/customer")
public class CustomerResource
{
    @POST
    public Response createCustomer(
            @FormParam("customerId") int customerId,
            @FormParam("firstName") String firstName,
            @FormParam("lastName") String lastName)
    {
        Customer customer = new Customer();
        customer.setCustomerId(customerId);
        customer.setFirstName(firstName);
        customer.setLastName(lastName);
        customer.insert();
        return Response.ok().build();
    }

    @GET
    @Path("/{id}")
    @Produces(MediaType.APPLICATION_JSON)
    public Customer getCustomerById(@PathParam("id") int customerId) throws JsonProcessingException
    {
        return CustomerFinder.findByPrimaryKey(customerId);
    }
}
        ]]>
        </programlisting>
    </sect1>
    <sect1>
        <title>REST Server Main Class</title>
        <para>
            The following is a snippet of the <code>SimpleBankServer</code> that initializes Reladomo with the <code>MithraRuntime</code>
            XML and starts the web server with the Jersey resource class.
        </para>
        <programlisting><![CDATA[
public class SimpleBankServer {

    private ResourceConfig config;

    public static void main(String[] args) throws Exception {
        new SimpleBankServer().start();
    }

    public SimpleBankServer() throws Exception {
        this.initReladomo();
    }

    protected void initReladomo() throws Exception {
        MithraManager mithraManager = MithraManagerProvider.getMithraManager();
        mithraManager.setTransactionTimeout(60 * 1000);
        loadReladomoXML("reladomoxml/SimpleBankRuntimeConfiguration.xml");
    }

    protected void initResources() {
        this.config = new ResourceConfig(CustomerResource.class);
        config.register(JacksonFeature.class);
        SimpleModule module = new SimpleModule();
        module.addSerializer(Customer.class, new CustomerSerde.Serializer());
        module.addDeserializer(Customer.class, new CustomerSerde.Deserializer());
        module.addSerializer(CustomerAccount.class, new CustomerAccountSerde.Serializer());
        module.addDeserializer(CustomerAccount.class, new CustomerAccountSerde.Deserializer());
    }

    protected void start() throws IOException {
        initResources();
        URI baseUri = UriBuilder.fromUri("http://localhost/").port(9998).build();
        HttpServer server = GrizzlyHttpServerFactory.createHttpServer(baseUri, config);
        server.start();
    }
}
        ]]>

        </programlisting>
    </sect1>
    <sect1>
        <title>JSON Serialization</title>
        <para>
            The REST API's endpoints consume JSON input. In the <code>CustomerResource</code> class,
            we have used the Reladomo generated classes like <code>Customer</code> as the data transfer POJOs.
        </para>
        <para>
            But the generated classes are not pure POJOs (in the Java sense). Therefore we need to add some
            extra plumbing to help with the JSON serialization and deserialization. This can be seen in the <code>initResources</code>
            method of the <code>SimpleBankServer</code> class.
        </para>
        <para>
            It should be pointed out that this is not necessarily idiomatic in Reladomo. In fact, Reladomo has no
            opinion on how you choose to implement JSON serialization and deserialization.
        </para>
    </sect1>
</chapter>
